

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Oct 31 16:02:20 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           	psect	smallconst
    29  000300                     __psmallconst:
    30                           	opt stack 0
    31  000300  00                 	db	0
    32  000301                     _dpowers:
    33                           	opt stack 0
    34  000301  0001               	dw	1
    35  000303  000A               	dw	10
    36  000305  0064               	dw	100
    37  000307  03E8               	dw	1000
    38  000309  2710               	dw	10000
    39  00030B                     __end_of_dpowers:
    40                           	opt stack 0
    41  0000                     _LATAbits	set	3977
    42  0000                     _LATCbits	set	3979
    43  0000                     _LATDbits	set	3980
    44  0000                     _TRISAbits	set	3986
    45  0000                     _TRISC	set	3988
    46  0000                     _TRISCbits	set	3988
    47  0000                     _TRISD	set	3989
    48  0000                     _OSCCON	set	4051
    49  0000                     _OSCCONbits	set	4051
    50  0000                     _INTCONbits	set	4082
    51  00030B                     STR_1:
    52  00030B  25                 	db	37
    53  00030C  64                 	db	100	;'d'
    54  00030D  00                 	db	0
    55                           
    56                           ; #config settings
    57  00030E  00                 	db	0	; dummy byte at the end
    58  0000                     
    59                           	psect	cinit
    60  000784                     __pcinit:
    61                           	opt stack 0
    62  000784                     start_initialization:
    63                           	opt stack 0
    64  000784                     __initialization:
    65                           	opt stack 0
    66                           
    67                           ; Clear objects allocated to COMRAM (42 bytes)
    68  000784  EE00  F001         	lfsr	0,__pbssCOMRAM
    69  000788  0E2A               	movlw	42
    70  00078A                     clear_0:
    71  00078A  6AEE               	clrf	postinc0,c
    72  00078C  06E8               	decf	wreg,f,c
    73  00078E  E1FD               	bnz	clear_0
    74  000790                     end_of_initialization:
    75                           	opt stack 0
    76  000790                     __end_of__initialization:
    77                           	opt stack 0
    78  000790  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    79  000792  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    80  000794  0E00               	movlw	low (__Lmediumconst shr (0+16))
    81  000796  6EF8               	movwf	tblptru,c
    82  000798  0100               	movlb	0
    83  00079A  EFCF  F003         	goto	_main	;jump to C main() function
    84                           tblptru	equ	0xFF8
    85                           postinc0	equ	0xFEE
    86                           wreg	equ	0xFE8
    87                           
    88                           	psect	bssCOMRAM
    89  000001                     __pbssCOMRAM:
    90                           	opt stack 0
    91  000001                     _btnCount:
    92                           	opt stack 0
    93  000001                     	ds	2
    94  000003                     _buf:
    95                           	opt stack 0
    96  000003                     	ds	40
    97                           tblptru	equ	0xFF8
    98                           postinc0	equ	0xFEE
    99                           wreg	equ	0xFE8
   100                           
   101                           	psect	cstackBANK0
   102  000060                     __pcstackBANK0:
   103                           	opt stack 0
   104  000060                     ??_LCDout:
   105                           
   106                           ; 0 bytes @ 0x0
   107  000060                     	ds	1
   108  000061                     LCDout@number:
   109                           	opt stack 0
   110                           
   111                           ; 1 bytes @ 0x1
   112  000061                     	ds	1
   113  000062                     SendLCD@type:
   114                           	opt stack 0
   115                           
   116                           ; 1 bytes @ 0x2
   117  000062                     	ds	1
   118  000063                     SendLCD@Byte:
   119                           	opt stack 0
   120                           
   121                           ; 1 bytes @ 0x3
   122  000063                     	ds	1
   123  000064                     ??_LCD_Init:
   124  000064                     SetLine@line:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x4
   128  000064                     	ds	1
   129  000065                     tblptru	equ	0xFF8
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           
   133                           ; 0 bytes @ 0x5
   134                           
   135                           	psect	cstackCOMRAM
   136  00002B                     __pcstackCOMRAM:
   137                           	opt stack 0
   138  00002B                     ??i2_LCDout:
   139  00002B                     ?___lwdiv:
   140                           	opt stack 0
   141  00002B                     ___lwdiv@dividend:
   142                           	opt stack 0
   143                           
   144                           ; 2 bytes @ 0x0
   145  00002B                     	ds	1
   146  00002C                     i2LCDout@number:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x1
   150  00002C                     	ds	1
   151  00002D                     i2SendLCD@type:
   152                           	opt stack 0
   153  00002D                     ___lwdiv@divisor:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x2
   157  00002D                     	ds	1
   158  00002E                     i2SendLCD@Byte:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0x3
   162  00002E                     	ds	1
   163  00002F                     LCD_String@string:
   164                           	opt stack 0
   165  00002F                     ___lwdiv@quotient:
   166                           	opt stack 0
   167                           
   168                           ; 2 bytes @ 0x4
   169  00002F                     	ds	2
   170  000031                     ??_LCD_String:
   171  000031                     ___lwdiv@counter:
   172                           	opt stack 0
   173                           
   174                           ; 1 bytes @ 0x6
   175  000031                     	ds	1
   176  000032                     ?___lwmod:
   177                           	opt stack 0
   178  000032                     ___lwmod@dividend:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x7
   182  000032                     	ds	2
   183  000034                     ___lwmod@divisor:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x9
   187  000034                     	ds	2
   188  000036                     ___lwmod@counter:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0xB
   192  000036                     	ds	1
   193  000037                     ?_sprintf:
   194                           	opt stack 0
   195  000037                     sprintf@sp:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0xC
   199  000037                     	ds	2
   200  000039                     sprintf@f:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0xE
   204  000039                     	ds	4
   205  00003D                     ??_sprintf:
   206                           
   207                           ; 0 bytes @ 0x12
   208  00003D                     	ds	1
   209  00003E                     sprintf@ap:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x13
   213  00003E                     	ds	2
   214  000040                     sprintf@flag:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x15
   218  000040                     	ds	1
   219  000041                     sprintf@prec:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x16
   223  000041                     	ds	1
   224  000042                     sprintf@val:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x17
   228  000042                     	ds	2
   229  000044                     sprintf@c:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x19
   233  000044                     	ds	1
   234  000045                     ??_InterruptHandlerHigh:
   235                           
   236                           ; 0 bytes @ 0x1A
   237  000045                     	ds	14
   238                           tblptru	equ	0xFF8
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242 ;;
   243 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   244 ;;
   245 ;; *************** function _main *****************
   246 ;; Defined at:
   247 ;;		line 24 in file "main.c"
   248 ;; Parameters:    Size  Location     Type
   249 ;;		None
   250 ;; Auto vars:     Size  Location     Type
   251 ;;		None
   252 ;; Return value:  Size  Location     Type
   253 ;;		None               void
   254 ;; Registers used:
   255 ;;		wreg, status,2, status,0, cstack
   256 ;; Tracked objects:
   257 ;;		On entry : 0/0
   258 ;;		On exit  : 0/0
   259 ;;		Unchanged: 0/0
   260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   261 ;;      Params:         0       0       0       0
   262 ;;      Locals:         0       0       0       0
   263 ;;      Temps:          0       0       0       0
   264 ;;      Totals:         0       0       0       0
   265 ;;Total ram usage:        0 bytes
   266 ;; Hardware stack levels required when called:    9
   267 ;; This function calls:
   268 ;;		_LCD_Init
   269 ;;		_SetLine
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  00079E                     __ptext0:
   277                           	opt stack 0
   278  00079E                     _main:
   279                           	opt stack 22
   280                           
   281                           ;main.c: 25: OSCCON = 0x72;
   282                           
   283                           ;incstack = 0
   284  00079E  0E72               	movlw	114
   285  0007A0  6ED3               	movwf	4051,c	;volatile
   286  0007A2                     l56:
   287  0007A2  A4D3               	btfss	4051,2,c	;volatile
   288  0007A4  D7FE               	goto	l56
   289                           
   290                           ;main.c: 29: TRISCbits.RC3 = 1;
   291  0007A6  8694               	bsf	3988,3,c	;volatile
   292                           
   293                           ;main.c: 30: INTCONbits.GIEH = 1;
   294  0007A8  8EF2               	bsf	intcon,7,c	;volatile
   295                           
   296                           ;main.c: 31: INTCONbits.INT0IE = 1;
   297  0007AA  88F2               	bsf	intcon,4,c	;volatile
   298                           
   299                           ;main.c: 33: LCD_Init();
   300  0007AC  EC2C  F002         	call	_LCD_Init	;wreg free
   301                           
   302                           ;main.c: 34: SetLine(1);
   303  0007B0  0E01               	movlw	1
   304  0007B2  EC38  F003         	call	_SetLine
   305  0007B6  D7FF               	goto	l60
   306  0007B8                     __end_of_main:
   307                           	opt stack 0
   308                           tblptru	equ	0xFF8
   309                           intcon	equ	0xFF2
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313 ;; *************** function _SetLine *****************
   314 ;; Defined at:
   315 ;;		line 93 in file "lcd.h"
   316 ;; Parameters:    Size  Location     Type
   317 ;;  line            1    wreg     unsigned char 
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  line            1    4[BANK0 ] unsigned char 
   320 ;; Return value:  Size  Location     Type
   321 ;;		None               void
   322 ;; Registers used:
   323 ;;		wreg, status,2, status,0, cstack
   324 ;; Tracked objects:
   325 ;;		On entry : 0/0
   326 ;;		On exit  : 0/0
   327 ;;		Unchanged: 0/0
   328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   329 ;;      Params:         0       0       0       0
   330 ;;      Locals:         0       1       0       0
   331 ;;      Temps:          0       0       0       0
   332 ;;      Totals:         0       1       0       0
   333 ;;Total ram usage:        1 bytes
   334 ;; Hardware stack levels used:    1
   335 ;; Hardware stack levels required when called:    8
   336 ;; This function calls:
   337 ;;		_SendLCD
   338 ;; This function is called by:
   339 ;;		_main
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           	psect	text1
   344  000670                     __ptext1:
   345                           	opt stack 0
   346  000670                     _SetLine:
   347                           	opt stack 22
   348                           
   349                           ;incstack = 0
   350                           ;SetLine@line stored from wreg
   351  000670  0100               	movlb	0	; () banked
   352  000672  6F64               	movwf	SetLine@line& (0+255),b
   353                           
   354                           ;lcd.h: 96: if(line == 1) {
   355  000674  0100               	movlb	0	; () banked
   356  000676  0564               	decf	SetLine@line& (0+255),w,b
   357  000678  A4D8               	btfss	status,2,c
   358  00067A  D007               	goto	l1216
   359                           
   360                           ; BSR set to: 0
   361                           ;lcd.h: 97: SendLCD(0x80,0);
   362  00067C  0E00               	movlw	0
   363  00067E  0100               	movlb	0	; () banked
   364  000680  6F62               	movwf	SendLCD@type& (0+255),b
   365  000682  0E80               	movlw	128
   366  000684  EC98  F003         	call	_SendLCD
   367                           
   368                           ;lcd.h: 98: } else if (line == 2) {
   369  000688  D012               	goto	l1222
   370  00068A                     l1216:
   371  00068A  0E02               	movlw	2
   372  00068C  0100               	movlb	0	; () banked
   373  00068E  1964               	xorwf	SetLine@line& (0+255),w,b
   374  000690  A4D8               	btfss	status,2,c
   375  000692  D007               	goto	l1220
   376                           
   377                           ; BSR set to: 0
   378                           ;lcd.h: 99: SendLCD(0xC0,0);
   379  000694  0E00               	movlw	0
   380  000696  0100               	movlb	0	; () banked
   381  000698  6F62               	movwf	SendLCD@type& (0+255),b
   382  00069A  0EC0               	movlw	192
   383  00069C  EC98  F003         	call	_SendLCD
   384                           
   385                           ;lcd.h: 100: } else {
   386  0006A0  D006               	goto	l1222
   387  0006A2                     l1220:
   388                           
   389                           ;lcd.h: 101: SendLCD(0x80,0);
   390  0006A2  0E00               	movlw	0
   391  0006A4  0100               	movlb	0	; () banked
   392  0006A6  6F62               	movwf	SendLCD@type& (0+255),b
   393  0006A8  0E80               	movlw	128
   394  0006AA  EC98  F003         	call	_SendLCD
   395  0006AE                     l1222:
   396                           
   397                           ;lcd.h: 102: }
   398                           ;lcd.h: 103: _delay((unsigned long)((50)*(8000000/4000000.0)));
   399  0006AE  0E21               	movlw	33
   400  0006B0                     u477:
   401  0006B0  2EE8               	decfsz	wreg,f,c
   402  0006B2  D7FE               	goto	u477
   403  0006B4  F000               	nop	
   404  0006B6  0012               	return		;funcret
   405  0006B8                     __end_of_SetLine:
   406                           	opt stack 0
   407                           tblptru	equ	0xFF8
   408                           intcon	equ	0xFF2
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           status	equ	0xFD8
   412                           
   413 ;; *************** function _LCD_Init *****************
   414 ;; Defined at:
   415 ;;		line 55 in file "lcd.h"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;		None               void
   422 ;; Registers used:
   423 ;;		wreg, status,2, status,0, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   429 ;;      Params:         0       0       0       0
   430 ;;      Locals:         0       0       0       0
   431 ;;      Temps:          0       1       0       0
   432 ;;      Totals:         0       1       0       0
   433 ;;Total ram usage:        1 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; Hardware stack levels required when called:    8
   436 ;; This function calls:
   437 ;;		_LCDout
   438 ;;		_SendLCD
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text2
   445  000458                     __ptext2:
   446                           	opt stack 0
   447  000458                     _LCD_Init:
   448                           	opt stack 22
   449                           
   450                           ;lcd.h: 57: TRISAbits.RA6 = 0;
   451                           
   452                           ;incstack = 0
   453  000458  9C92               	bcf	3986,6,c	;volatile
   454                           
   455                           ;lcd.h: 58: TRISC &= 0b11111000;
   456  00045A  0EF8               	movlw	248
   457  00045C  1694               	andwf	3988,f,c	;volatile
   458                           
   459                           ;lcd.h: 59: TRISD &= 0b11111100;
   460  00045E  0EFC               	movlw	252
   461  000460  1695               	andwf	3989,f,c	;volatile
   462                           
   463                           ;lcd.h: 61: LATCbits.LC0 = 0;
   464  000462  908B               	bcf	3979,0,c	;volatile
   465                           
   466                           ;lcd.h: 62: LATAbits.LATA6 = 0;
   467  000464  9C89               	bcf	3977,6,c	;volatile
   468                           
   469                           ;lcd.h: 63: LATDbits.LD1 = 0;
   470  000466  928C               	bcf	3980,1,c	;volatile
   471                           
   472                           ;lcd.h: 64: LATDbits.LD0 = 0;
   473  000468  908C               	bcf	3980,0,c	;volatile
   474                           
   475                           ;lcd.h: 65: LATCbits.LC2 = 0;
   476  00046A  948B               	bcf	3979,2,c	;volatile
   477                           
   478                           ;lcd.h: 66: LATCbits.LC1 = 0;
   479  00046C  928B               	bcf	3979,1,c	;volatile
   480                           
   481                           ;lcd.h: 69: LCDout(0b0011);
   482  00046E  0E03               	movlw	3
   483  000470  EC85  F002         	call	_LCDout
   484                           
   485                           ;lcd.h: 70: _delay((unsigned long)((5000)*(8000000/4000000.0)));
   486  000474  0E0D               	movlw	13
   487  000476  0100               	movlb	0	; () banked
   488  000478  6F64               	movwf	??_LCD_Init& (0+255),b
   489  00047A  0EFC               	movlw	252
   490  00047C                     u487:
   491  00047C  2EE8               	decfsz	wreg,f,c
   492  00047E  D7FE               	goto	u487
   493  000480  2F64               	decfsz	??_LCD_Init& (0+255),f,b
   494  000482  D7FC               	goto	u487
   495                           
   496                           ;lcd.h: 71: LCDout(0b0011);
   497  000484  0E03               	movlw	3
   498  000486  EC85  F002         	call	_LCDout
   499                           
   500                           ;lcd.h: 72: _delay((unsigned long)((200)*(8000000/4000000.0)));
   501  00048A  0E85               	movlw	133
   502  00048C                     u497:
   503  00048C  2EE8               	decfsz	wreg,f,c
   504  00048E  D7FE               	goto	u497
   505  000490  F000               	nop	
   506                           
   507                           ;lcd.h: 73: LCDout(0b0011);
   508  000492  0E03               	movlw	3
   509  000494  EC85  F002         	call	_LCDout
   510                           
   511                           ;lcd.h: 74: _delay((unsigned long)((50)*(8000000/4000000.0)));
   512  000498  0E21               	movlw	33
   513  00049A                     u507:
   514  00049A  2EE8               	decfsz	wreg,f,c
   515  00049C  D7FE               	goto	u507
   516  00049E  F000               	nop	
   517                           
   518                           ;lcd.h: 76: LCDout(0b0010);
   519  0004A0  0E02               	movlw	2
   520  0004A2  EC85  F002         	call	_LCDout
   521                           
   522                           ;lcd.h: 77: _delay((unsigned long)((50)*(8000000/4000000.0)));
   523  0004A6  0E21               	movlw	33
   524  0004A8                     u517:
   525  0004A8  2EE8               	decfsz	wreg,f,c
   526  0004AA  D7FE               	goto	u517
   527  0004AC  F000               	nop	
   528                           
   529                           ;lcd.h: 79: SendLCD(0b00001000,0);
   530  0004AE  0E00               	movlw	0
   531  0004B0  0100               	movlb	0	; () banked
   532  0004B2  6F62               	movwf	SendLCD@type& (0+255),b
   533  0004B4  0E08               	movlw	8
   534  0004B6  EC98  F003         	call	_SendLCD
   535                           
   536                           ;lcd.h: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
   537  0004BA  0E21               	movlw	33
   538  0004BC                     u527:
   539  0004BC  2EE8               	decfsz	wreg,f,c
   540  0004BE  D7FE               	goto	u527
   541  0004C0  F000               	nop	
   542                           
   543                           ;lcd.h: 82: SendLCD(0b00000001,0);
   544  0004C2  0E00               	movlw	0
   545  0004C4  0100               	movlb	0	; () banked
   546  0004C6  6F62               	movwf	SendLCD@type& (0+255),b
   547  0004C8  0E01               	movlw	1
   548  0004CA  EC98  F003         	call	_SendLCD
   549                           
   550                           ;lcd.h: 83: _delay((unsigned long)((1700)*(8000000/4000000.0)));
   551  0004CE  0E05               	movlw	5
   552  0004D0  0100               	movlb	0	; () banked
   553  0004D2  6F64               	movwf	??_LCD_Init& (0+255),b
   554  0004D4  0E69               	movlw	105
   555  0004D6                     u537:
   556  0004D6  2EE8               	decfsz	wreg,f,c
   557  0004D8  D7FE               	goto	u537
   558  0004DA  2F64               	decfsz	??_LCD_Init& (0+255),f,b
   559  0004DC  D7FC               	goto	u537
   560  0004DE  F000               	nop	
   561                           
   562                           ;lcd.h: 85: SendLCD(0b00000110,0);
   563  0004E0  0E00               	movlw	0
   564  0004E2  0100               	movlb	0	; () banked
   565  0004E4  6F62               	movwf	SendLCD@type& (0+255),b
   566  0004E6  0E06               	movlw	6
   567  0004E8  EC98  F003         	call	_SendLCD
   568                           
   569                           ;lcd.h: 86: _delay((unsigned long)((50)*(8000000/4000000.0)));
   570  0004EC  0E21               	movlw	33
   571  0004EE                     u547:
   572  0004EE  2EE8               	decfsz	wreg,f,c
   573  0004F0  D7FE               	goto	u547
   574  0004F2  F000               	nop	
   575                           
   576                           ;lcd.h: 88: SendLCD(0b00001110, 0);
   577  0004F4  0E00               	movlw	0
   578  0004F6  0100               	movlb	0	; () banked
   579  0004F8  6F62               	movwf	SendLCD@type& (0+255),b
   580  0004FA  0E0E               	movlw	14
   581  0004FC  EC98  F003         	call	_SendLCD
   582                           
   583                           ;lcd.h: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
   584  000500  0E21               	movlw	33
   585  000502                     u557:
   586  000502  2EE8               	decfsz	wreg,f,c
   587  000504  D7FE               	goto	u557
   588  000506  F000               	nop	
   589  000508  0012               	return		;funcret
   590  00050A                     __end_of_LCD_Init:
   591                           	opt stack 0
   592                           tblptru	equ	0xFF8
   593                           intcon	equ	0xFF2
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           status	equ	0xFD8
   597                           
   598 ;; *************** function _SendLCD *****************
   599 ;; Defined at:
   600 ;;		line 45 in file "lcd.h"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  Byte            1    wreg     unsigned char 
   603 ;;  type            1    2[BANK0 ] unsigned char 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  Byte            1    3[BANK0 ] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;		None               void
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   615 ;;      Params:         0       1       0       0
   616 ;;      Locals:         0       1       0       0
   617 ;;      Temps:          0       0       0       0
   618 ;;      Totals:         0       2       0       0
   619 ;;Total ram usage:        2 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    7
   622 ;; This function calls:
   623 ;;		_LCDout
   624 ;; This function is called by:
   625 ;;		_LCD_Init
   626 ;;		_SetLine
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text3
   631  000730                     __ptext3:
   632                           	opt stack 0
   633  000730                     _SendLCD:
   634                           	opt stack 22
   635                           
   636                           ;incstack = 0
   637                           ;SendLCD@Byte stored from wreg
   638  000730  0100               	movlb	0	; () banked
   639  000732  6F63               	movwf	SendLCD@Byte& (0+255),b
   640                           
   641                           ;lcd.h: 48: LATAbits.LATA6 = type;
   642  000734  0100               	movlb	0	; () banked
   643  000736  B162               	btfsc	SendLCD@type& (0+255),0,b
   644  000738  D002               	bra	u435
   645  00073A  9C89               	bcf	3977,6,c	;volatile
   646  00073C  D001               	bra	u436
   647  00073E                     u435:
   648  00073E  8C89               	bsf	3977,6,c	;volatile
   649  000740                     u436:
   650                           
   651                           ;lcd.h: 50: LCDout(Byte >> 4);
   652  000740  0100               	movlb	0	; () banked
   653  000742  3963               	swapf	SendLCD@Byte& (0+255),w,b
   654  000744  0B0F               	andlw	15
   655  000746  EC85  F002         	call	_LCDout
   656                           
   657                           ;lcd.h: 51: _delay((unsigned long)((10)*(8000000/4000000.0)));
   658  00074A  0E06               	movlw	6
   659  00074C                     u567:
   660  00074C  2EE8               	decfsz	wreg,f,c
   661  00074E  D7FE               	goto	u567
   662  000750  D000               	nop2		;nop
   663                           
   664                           ;lcd.h: 53: LCDout(Byte & 0b00001111);
   665  000752  0100               	movlb	0	; () banked
   666  000754  5163               	movf	SendLCD@Byte& (0+255),w,b
   667  000756  0B0F               	andlw	15
   668  000758  EC85  F002         	call	_LCDout
   669  00075C  0012               	return		;funcret
   670  00075E                     __end_of_SendLCD:
   671                           	opt stack 0
   672                           tblptru	equ	0xFF8
   673                           intcon	equ	0xFF2
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           status	equ	0xFD8
   677                           
   678 ;; *************** function _LCDout *****************
   679 ;; Defined at:
   680 ;;		line 33 in file "lcd.h"
   681 ;; Parameters:    Size  Location     Type
   682 ;;  number          1    wreg     unsigned char 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  number          1    1[BANK0 ] unsigned char 
   685 ;; Return value:  Size  Location     Type
   686 ;;		None               void
   687 ;; Registers used:
   688 ;;		wreg, status,2, status,0, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   694 ;;      Params:         0       0       0       0
   695 ;;      Locals:         0       1       0       0
   696 ;;      Temps:          0       1       0       0
   697 ;;      Totals:         0       2       0       0
   698 ;;Total ram usage:        2 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    6
   701 ;; This function calls:
   702 ;;		_E_TOG
   703 ;; This function is called by:
   704 ;;		_SendLCD
   705 ;;		_LCD_Init
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text4
   710  00050A                     __ptext4:
   711                           	opt stack 0
   712  00050A                     _LCDout:
   713                           	opt stack 22
   714                           
   715                           ;incstack = 0
   716                           ;LCDout@number stored from wreg
   717  00050A  0100               	movlb	0	; () banked
   718  00050C  6F61               	movwf	LCDout@number& (0+255),b
   719                           
   720                           ;lcd.h: 35: LATDbits.LD1 = number >> 3 & 0b00000001;
   721  00050E  C061  F060         	movff	LCDout@number,??_LCDout
   722  000512  0100               	movlb	0	; () banked
   723  000514  90D8               	bcf	status,0,c
   724  000516  3360               	rrcf	??_LCDout& (0+255),f,b
   725  000518  0100               	movlb	0	; () banked
   726  00051A  90D8               	bcf	status,0,c
   727  00051C  3360               	rrcf	??_LCDout& (0+255),f,b
   728  00051E  0100               	movlb	0	; () banked
   729  000520  90D8               	bcf	status,0,c
   730  000522  3360               	rrcf	??_LCDout& (0+255),f,b
   731  000524  0E01               	movlw	1
   732  000526  0100               	movlb	0	; () banked
   733  000528  1760               	andwf	??_LCDout& (0+255),f,b
   734  00052A  0100               	movlb	0	; () banked
   735  00052C  4760               	rlncf	??_LCDout& (0+255),f,b
   736  00052E  508C               	movf	3980,w,c	;volatile
   737  000530  0100               	movlb	0	; () banked
   738  000532  1960               	xorwf	??_LCDout& (0+255),w,b
   739  000534  0BFD               	andlw	-3
   740  000536  1960               	xorwf	??_LCDout& (0+255),w,b
   741  000538  6E8C               	movwf	3980,c	;volatile
   742                           
   743                           ;lcd.h: 36: LATDbits.LD0 = (number >> 2) & 0b00000001;
   744  00053A  C061  F060         	movff	LCDout@number,??_LCDout
   745  00053E  0100               	movlb	0	; () banked
   746  000540  90D8               	bcf	status,0,c
   747  000542  3360               	rrcf	??_LCDout& (0+255),f,b
   748  000544  0100               	movlb	0	; () banked
   749  000546  90D8               	bcf	status,0,c
   750  000548  3360               	rrcf	??_LCDout& (0+255),f,b
   751  00054A  0E01               	movlw	1
   752  00054C  0100               	movlb	0	; () banked
   753  00054E  1760               	andwf	??_LCDout& (0+255),f,b
   754  000550  508C               	movf	3980,w,c	;volatile
   755  000552  0100               	movlb	0	; () banked
   756  000554  1960               	xorwf	??_LCDout& (0+255),w,b
   757  000556  0BFE               	andlw	-2
   758  000558  1960               	xorwf	??_LCDout& (0+255),w,b
   759  00055A  6E8C               	movwf	3980,c	;volatile
   760                           
   761                           ;lcd.h: 37: LATCbits.LC2 = (number >> 1) & 0b00000001;
   762  00055C  C061  F060         	movff	LCDout@number,??_LCDout
   763  000560  0100               	movlb	0	; () banked
   764  000562  90D8               	bcf	status,0,c
   765  000564  3360               	rrcf	??_LCDout& (0+255),f,b
   766  000566  0E01               	movlw	1
   767  000568  0100               	movlb	0	; () banked
   768  00056A  1760               	andwf	??_LCDout& (0+255),f,b
   769  00056C  0100               	movlb	0	; () banked
   770  00056E  4760               	rlncf	??_LCDout& (0+255),f,b
   771  000570  4760               	rlncf	??_LCDout& (0+255),f,b
   772  000572  508B               	movf	3979,w,c	;volatile
   773  000574  0100               	movlb	0	; () banked
   774  000576  1960               	xorwf	??_LCDout& (0+255),w,b
   775  000578  0BFB               	andlw	-5
   776  00057A  1960               	xorwf	??_LCDout& (0+255),w,b
   777  00057C  6E8B               	movwf	3979,c	;volatile
   778                           
   779                           ;lcd.h: 38: LATCbits.LC1 = number & 0b00000001;
   780  00057E  C061  F060         	movff	LCDout@number,??_LCDout
   781  000582  0E01               	movlw	1
   782  000584  0100               	movlb	0	; () banked
   783  000586  1760               	andwf	??_LCDout& (0+255),f,b
   784  000588  0100               	movlb	0	; () banked
   785  00058A  4760               	rlncf	??_LCDout& (0+255),f,b
   786  00058C  508B               	movf	3979,w,c	;volatile
   787  00058E  0100               	movlb	0	; () banked
   788  000590  1960               	xorwf	??_LCDout& (0+255),w,b
   789  000592  0BFD               	andlw	-3
   790  000594  1960               	xorwf	??_LCDout& (0+255),w,b
   791  000596  6E8B               	movwf	3979,c	;volatile
   792                           
   793                           ; BSR set to: 0
   794                           ;lcd.h: 40: E_TOG();
   795  000598  ECDC  F003         	call	_E_TOG	;wreg free
   796                           
   797                           ;lcd.h: 41: _delay((unsigned long)((5)*(8000000/4000000.0)));
   798  00059C  0E03               	movlw	3
   799  00059E                     u577:
   800  00059E  2EE8               	decfsz	wreg,f,c
   801  0005A0  D7FE               	goto	u577
   802  0005A2  F000               	nop	
   803  0005A4  0012               	return		;funcret
   804  0005A6                     __end_of_LCDout:
   805                           	opt stack 0
   806                           tblptru	equ	0xFF8
   807                           intcon	equ	0xFF2
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           status	equ	0xFD8
   811                           
   812 ;; *************** function _E_TOG *****************
   813 ;; Defined at:
   814 ;;		line 26 in file "lcd.h"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   828 ;;      Params:         0       0       0       0
   829 ;;      Locals:         0       0       0       0
   830 ;;      Temps:          0       0       0       0
   831 ;;      Totals:         0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    5
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_LCDout
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text5
   843  0007B8                     __ptext5:
   844                           	opt stack 0
   845  0007B8                     _E_TOG:
   846                           	opt stack 22
   847                           
   848                           ;lcd.h: 27: LATCbits.LC0 = 1;
   849                           
   850                           ;incstack = 0
   851  0007B8  808B               	bsf	3979,0,c	;volatile
   852                           
   853                           ;lcd.h: 28: _delay((unsigned long)((5)*(8000000/4000000.0)));
   854  0007BA  0E03               	movlw	3
   855  0007BC                     u587:
   856  0007BC  2EE8               	decfsz	wreg,f,c
   857  0007BE  D7FE               	goto	u587
   858  0007C0  F000               	nop	
   859                           
   860                           ;lcd.h: 29: LATCbits.LC0 = 0;
   861  0007C2  908B               	bcf	3979,0,c	;volatile
   862  0007C4  0012               	return		;funcret
   863  0007C6                     __end_of_E_TOG:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           intcon	equ	0xFF2
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _InterruptHandlerHigh *****************
   872 ;; Defined at:
   873 ;;		line 40 in file "main.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;		None               void
   880 ;; Registers used:
   881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   887 ;;      Params:         0       0       0       0
   888 ;;      Locals:         0       0       0       0
   889 ;;      Temps:         14       0       0       0
   890 ;;      Totals:        14       0       0       0
   891 ;;Total ram usage:       14 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    4
   894 ;; This function calls:
   895 ;;		_LCD_String
   896 ;;		_sprintf
   897 ;;		i2_SendLCD
   898 ;; This function is called by:
   899 ;;		Interrupt level 2
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	intcode
   904  000008                     __pintcode:
   905                           	opt stack 0
   906  000008                     _InterruptHandlerHigh:
   907                           	opt stack 22
   908                           
   909                           ;incstack = 0
   910  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   911  00000A  CFFA F045          	movff	pclath,??_InterruptHandlerHigh
   912  00000E  CFFB F046          	movff	pclatu,??_InterruptHandlerHigh+1
   913  000012  CFE9 F047          	movff	fsr0l,??_InterruptHandlerHigh+2
   914  000016  CFEA F048          	movff	fsr0h,??_InterruptHandlerHigh+3
   915  00001A  CFE1 F049          	movff	fsr1l,??_InterruptHandlerHigh+4
   916  00001E  CFE2 F04A          	movff	fsr1h,??_InterruptHandlerHigh+5
   917  000022  CFD9 F04B          	movff	fsr2l,??_InterruptHandlerHigh+6
   918  000026  CFDA F04C          	movff	fsr2h,??_InterruptHandlerHigh+7
   919  00002A  CFF3 F04D          	movff	prodl,??_InterruptHandlerHigh+8
   920  00002E  CFF4 F04E          	movff	prodh,??_InterruptHandlerHigh+9
   921  000032  CFF6 F04F          	movff	tblptrl,??_InterruptHandlerHigh+10
   922  000036  CFF7 F050          	movff	tblptrh,??_InterruptHandlerHigh+11
   923  00003A  CFF8 F051          	movff	tblptru,??_InterruptHandlerHigh+12
   924  00003E  CFF5 F052          	movff	tablat,??_InterruptHandlerHigh+13
   925                           
   926                           ;main.c: 41: if(INTCONbits.INT0IF) {
   927  000042  A2F2               	btfss	intcon,1,c	;volatile
   928  000044  D01C               	goto	i2l66
   929                           
   930                           ;main.c: 42: btnCount++;
   931  000046  4A01               	infsnz	_btnCount,f,c	;volatile
   932  000048  2A02               	incf	_btnCount+1,f,c	;volatile
   933                           
   934                           ;main.c: 43: SendLCD(0b00000001, 0);
   935  00004A  0E00               	movlw	0
   936  00004C  6E2D               	movwf	i2SendLCD@type,c
   937  00004E  0E01               	movlw	1
   938  000050  ECAF  F003         	call	i2_SendLCD
   939                           
   940                           ;main.c: 44: sprintf(buf,"%d", btnCount);
   941  000054  0E03               	movlw	low _buf
   942  000056  6E37               	movwf	sprintf@sp,c
   943  000058  0E00               	movlw	high _buf
   944  00005A  6E38               	movwf	sprintf@sp+1,c
   945  00005C  0E0B               	movlw	low STR_1
   946  00005E  6E39               	movwf	sprintf@f,c
   947  000060  0E03               	movlw	high STR_1
   948  000062  6E3A               	movwf	sprintf@f+1,c
   949  000064  C001  F03B         	movff	_btnCount,?_sprintf+4	;volatile
   950  000068  C002  F03C         	movff	_btnCount+1,?_sprintf+5	;volatile
   951  00006C  EC88  F001         	call	_sprintf	;wreg free
   952                           
   953                           ;main.c: 45: LCD_String(buf);
   954  000070  0E03               	movlw	low _buf
   955  000072  6E2F               	movwf	LCD_String@string,c
   956  000074  0E00               	movlw	high _buf
   957  000076  6E30               	movwf	LCD_String@string+1,c
   958  000078  EC7D  F003         	call	_LCD_String	;wreg free
   959                           
   960                           ;main.c: 46: INTCONbits.INT0IF = 0;
   961  00007C  92F2               	bcf	intcon,1,c	;volatile
   962  00007E                     i2l66:
   963  00007E  C052  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
   964  000082  C051  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
   965  000086  C050  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
   966  00008A  C04F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
   967  00008E  C04E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
   968  000092  C04D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
   969  000096  C04C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
   970  00009A  C04B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
   971  00009E  C04A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
   972  0000A2  C049  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
   973  0000A6  C048  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
   974  0000AA  C047  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
   975  0000AE  C046  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
   976  0000B2  C045  FFFA         	movff	??_InterruptHandlerHigh,pclath
   977  0000B6  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   978  0000B8  0011               	retfie		f
   979  0000BA                     __end_of_InterruptHandlerHigh:
   980                           	opt stack 0
   981                           pclatu	equ	0xFFB
   982                           pclath	equ	0xFFA
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           prodh	equ	0xFF4
   988                           prodl	equ	0xFF3
   989                           intcon	equ	0xFF2
   990                           postinc0	equ	0xFEE
   991                           fsr0h	equ	0xFEA
   992                           fsr0l	equ	0xFE9
   993                           wreg	equ	0xFE8
   994                           fsr1h	equ	0xFE2
   995                           fsr1l	equ	0xFE1
   996                           fsr2h	equ	0xFDA
   997                           fsr2l	equ	0xFD9
   998                           status	equ	0xFD8
   999                           
  1000 ;; *************** function _sprintf *****************
  1001 ;; Defined at:
  1002 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1005 ;;		 -> buf(40), 
  1006 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1007 ;;		 -> STR_1(3), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  tmpval          4    0        struct .
  1010 ;;  cp              3    0        PTR const unsigned char 
  1011 ;;  val             2   23[COMRAM] unsigned int 
  1012 ;;  ap              2   19[COMRAM] PTR void [1]
  1013 ;;		 -> ?_sprintf(2), 
  1014 ;;  len             2    0        unsigned int 
  1015 ;;  c               1   25[COMRAM] char 
  1016 ;;  prec            1   22[COMRAM] char 
  1017 ;;  flag            1   21[COMRAM] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  2   12[COMRAM] int 
  1020 ;; Registers used:
  1021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1027 ;;      Params:         6       0       0       0
  1028 ;;      Locals:         7       0       0       0
  1029 ;;      Temps:          1       0       0       0
  1030 ;;      Totals:        14       0       0       0
  1031 ;;Total ram usage:       14 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    1
  1034 ;; This function calls:
  1035 ;;		___lwdiv
  1036 ;;		___lwmod
  1037 ;; This function is called by:
  1038 ;;		_InterruptHandlerHigh
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text7
  1043  000310                     __ptext7:
  1044                           	opt stack 0
  1045  000310                     _sprintf:
  1046                           	opt stack 24
  1047                           
  1048                           ;doprnt.c: 494: va_list ap;
  1049                           ;doprnt.c: 499: signed char c;
  1050                           ;doprnt.c: 506: signed char prec;
  1051                           ;doprnt.c: 508: unsigned char flag;
  1052                           ;doprnt.c: 523: union {
  1053                           ;doprnt.c: 524: unsigned long vd;
  1054                           ;doprnt.c: 525: double integ;
  1055                           ;doprnt.c: 526: } tmpval;
  1056                           ;doprnt.c: 528: unsigned int val;
  1057                           ;doprnt.c: 529: unsigned len;
  1058                           ;doprnt.c: 530: const char * cp;
  1059                           ;doprnt.c: 533: *ap = __va_start();
  1060                           
  1061                           ;incstack = 0
  1062  000310  0E3B               	movlw	low (?_sprintf+4)
  1063  000312  6E3E               	movwf	sprintf@ap,c
  1064  000314  0E00               	movlw	high (?_sprintf+4)
  1065  000316  6E3F               	movwf	sprintf@ap+1,c
  1066                           
  1067                           ;doprnt.c: 536: while(c = *f++) {
  1068  000318  D08C               	goto	i2l1122
  1069  00031A                     i2l1070:
  1070                           
  1071                           ;doprnt.c: 538: if(c != '%')
  1072  00031A  0E25               	movlw	37
  1073  00031C  1844               	xorwf	sprintf@c,w,c
  1074  00031E  B4D8               	btfsc	status,2,c
  1075  000320  D009               	goto	i2l1076
  1076                           
  1077                           ;doprnt.c: 540: {
  1078                           ;doprnt.c: 541: ((*sp++ = (c)));
  1079  000322  C037  FFD9         	movff	sprintf@sp,fsr2l
  1080  000326  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1081  00032A  C044  FFDF         	movff	sprintf@c,indf2
  1082  00032E  4A37               	infsnz	sprintf@sp,f,c
  1083  000330  2A38               	incf	sprintf@sp+1,f,c
  1084                           
  1085                           ;doprnt.c: 542: continue;
  1086  000332  D07F               	goto	i2l1122
  1087  000334                     i2l1076:
  1088                           
  1089                           ;doprnt.c: 543: }
  1090                           ;doprnt.c: 548: flag = 0;
  1091  000334  0E00               	movlw	0
  1092  000336  6E40               	movwf	sprintf@flag,c
  1093                           
  1094                           ;doprnt.c: 822: }
  1095                           
  1096                           ;doprnt.c: 813: continue;
  1097                           
  1098                           ;doprnt.c: 802: default:
  1099                           
  1100                           ;doprnt.c: 698: case 'i':
  1101                           ;doprnt.c: 699: break;
  1102                           
  1103                           ;doprnt.c: 697: case 'd':
  1104                           
  1105                           ;doprnt.c: 638: goto alldone;
  1106                           
  1107                           ;doprnt.c: 637: case 0:
  1108                           
  1109                           ;doprnt.c: 635: switch(c = *f++) {
  1110  000338  C039  FFF6         	movff	sprintf@f,tblptrl
  1111  00033C  C03A  FFF7         	movff	sprintf@f+1,tblptrh
  1112  000340  4A39               	infsnz	sprintf@f,f,c
  1113  000342  2A3A               	incf	sprintf@f+1,f,c
  1114  000344                     	if	0	;tblptru may be non-zero
  1115  000344                     	endif
  1116  000344                     	if	0	;tblptru may be non-zero
  1117  000344                     	endif
  1118  000344  0008               	tblrd		*
  1119  000346  CFF5 F044          	movff	tablat,sprintf@c
  1120  00034A  5044               	movf	sprintf@c,w,c
  1121                           
  1122                           ; Switch size 1, requested type "space"
  1123                           ; Number of cases is 3, Range of values is 0 to 105
  1124                           ; switch strategies available:
  1125                           ; Name         Instructions Cycles
  1126                           ; simple_byte           10     6 (average)
  1127                           ;	Chosen strategy is simple_byte
  1128  00034C  0A00               	xorlw	0	; case 0
  1129  00034E  B4D8               	btfsc	status,2,c
  1130  000350  D07C               	goto	i2l1124
  1131  000352  0A64               	xorlw	100	; case 100
  1132  000354  B4D8               	btfsc	status,2,c
  1133  000356  D003               	goto	i2l1082
  1134  000358  0A0D               	xorlw	13	; case 105
  1135  00035A  A4D8               	btfss	status,2,c
  1136  00035C  D06A               	goto	i2l1122
  1137  00035E                     i2l1082:
  1138                           
  1139                           ;doprnt.c: 1253: {
  1140                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1141  00035E  C03E  FFD9         	movff	sprintf@ap,fsr2l
  1142  000362  C03F  FFDA         	movff	sprintf@ap+1,fsr2h
  1143  000366  CFDE F042          	movff	postinc2,sprintf@val
  1144  00036A  CFDD F043          	movff	postdec2,sprintf@val+1
  1145  00036E  0E02               	movlw	2
  1146  000370  263E               	addwf	sprintf@ap,f,c
  1147  000372  0E00               	movlw	0
  1148  000374  223F               	addwfc	sprintf@ap+1,f,c
  1149                           
  1150                           ;doprnt.c: 1261: if((int)val < 0) {
  1151  000376  AE43               	btfss	sprintf@val+1,7,c
  1152  000378  D006               	goto	i2l1092
  1153                           
  1154                           ;doprnt.c: 1262: flag |= 0x03;
  1155  00037A  0E03               	movlw	3
  1156  00037C  1240               	iorwf	sprintf@flag,f,c
  1157                           
  1158                           ;doprnt.c: 1263: val = -val;
  1159  00037E  6C42               	negf	sprintf@val,c
  1160  000380  1E43               	comf	sprintf@val+1,f,c
  1161  000382  B0D8               	btfsc	status,0,c
  1162  000384  2A43               	incf	sprintf@val+1,f,c
  1163  000386                     i2l1092:
  1164                           
  1165                           ;doprnt.c: 1264: }
  1166                           ;doprnt.c: 1266: }
  1167                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1168  000386  0E01               	movlw	1
  1169  000388  6E44               	movwf	sprintf@c,c
  1170  00038A                     i2l1094:
  1171  00038A  0E05               	movlw	5
  1172  00038C  1844               	xorwf	sprintf@c,w,c
  1173  00038E  B4D8               	btfsc	status,2,c
  1174  000390  D012               	goto	i2l1106
  1175                           
  1176                           ;doprnt.c: 1306: if(val < dpowers[c])
  1177  000392  5044               	movf	sprintf@c,w,c
  1178  000394  0D02               	mullw	2
  1179  000396  0E01               	movlw	low _dpowers
  1180  000398  24F3               	addwf	prodl,w,c
  1181  00039A  6EF6               	movwf	tblptrl,c
  1182  00039C  0E03               	movlw	high _dpowers
  1183  00039E  20F4               	addwfc	prodh,w,c
  1184  0003A0  6EF7               	movwf	tblptrh,c
  1185  0003A2                     	if	0	;There are less than 3 active tblptr bytes
  1186  0003A2                     	endif
  1187  0003A2  0009               	tblrd		*+
  1188  0003A4  50F5               	movf	tablat,w,c
  1189  0003A6  5C42               	subwf	sprintf@val,w,c
  1190  0003A8  0009               	tblrd		*+
  1191  0003AA  50F5               	movf	tablat,w,c
  1192  0003AC  5843               	subwfb	sprintf@val+1,w,c
  1193  0003AE  A0D8               	btfss	status,0,c
  1194  0003B0  D002               	goto	i2l1106
  1195                           
  1196                           ;doprnt.c: 1307: break;
  1197  0003B2  2A44               	incf	sprintf@c,f,c
  1198  0003B4  D7EA               	goto	i2l1094
  1199  0003B6                     i2l1106:
  1200                           
  1201                           ;doprnt.c: 1422: {
  1202                           ;doprnt.c: 1438: if(flag & 0x03)
  1203  0003B6  C040  F03D         	movff	sprintf@flag,??_sprintf
  1204  0003BA  0E03               	movlw	3
  1205  0003BC  163D               	andwf	??_sprintf,f,c
  1206  0003BE  B4D8               	btfsc	status,2,c
  1207  0003C0  D008               	goto	i2l1112
  1208                           
  1209                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1210  0003C2  C037  FFD9         	movff	sprintf@sp,fsr2l
  1211  0003C6  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1212  0003CA  0E2D               	movlw	45
  1213  0003CC  6EDF               	movwf	indf2,c
  1214  0003CE  4A37               	infsnz	sprintf@sp,f,c
  1215  0003D0  2A38               	incf	sprintf@sp+1,f,c
  1216  0003D2                     i2l1112:
  1217                           
  1218                           ;doprnt.c: 1469: }
  1219                           ;doprnt.c: 1472: prec = c;
  1220  0003D2  C044  F041         	movff	sprintf@c,sprintf@prec
  1221                           
  1222                           ;doprnt.c: 1474: while(prec--) {
  1223  0003D6  D029               	goto	i2l1120
  1224  0003D8                     i2l1114:
  1225                           
  1226                           ;doprnt.c: 1478: {
  1227                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1228  0003D8  5041               	movf	sprintf@prec,w,c
  1229  0003DA  0D02               	mullw	2
  1230  0003DC  0E01               	movlw	low _dpowers
  1231  0003DE  24F3               	addwf	prodl,w,c
  1232  0003E0  6EF6               	movwf	tblptrl,c
  1233  0003E2  0E03               	movlw	high _dpowers
  1234  0003E4  20F4               	addwfc	prodh,w,c
  1235  0003E6  6EF7               	movwf	tblptrh,c
  1236  0003E8                     	if	0	;There are less than 3 active tblptr bytes
  1237  0003E8                     	endif
  1238  0003E8  0009               	tblrd		*+
  1239  0003EA  CFF5 F02D          	movff	tablat,___lwdiv@divisor
  1240  0003EE  000A               	tblrd		*-
  1241  0003F0  CFF5 F02E          	movff	tablat,___lwdiv@divisor+1
  1242  0003F4  C042  F02B         	movff	sprintf@val,___lwdiv@dividend
  1243  0003F8  C043  F02C         	movff	sprintf@val+1,___lwdiv@dividend+1
  1244  0003FC  EC0F  F003         	call	___lwdiv	;wreg free
  1245  000400  C02B  F032         	movff	?___lwdiv,___lwmod@dividend
  1246  000404  C02C  F033         	movff	?___lwdiv+1,___lwmod@dividend+1
  1247  000408  0E00               	movlw	0
  1248  00040A  6E35               	movwf	___lwmod@divisor+1,c
  1249  00040C  0E0A               	movlw	10
  1250  00040E  6E34               	movwf	___lwmod@divisor,c
  1251  000410  EC5C  F003         	call	___lwmod	;wreg free
  1252  000414  5032               	movf	?___lwmod,w,c
  1253  000416  0F30               	addlw	48
  1254  000418  6E44               	movwf	sprintf@c,c
  1255                           
  1256                           ;doprnt.c: 1523: }
  1257                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1258  00041A  C037  FFD9         	movff	sprintf@sp,fsr2l
  1259  00041E  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1260  000422  C044  FFDF         	movff	sprintf@c,indf2
  1261  000426  4A37               	infsnz	sprintf@sp,f,c
  1262  000428  2A38               	incf	sprintf@sp+1,f,c
  1263  00042A                     i2l1120:
  1264  00042A  0641               	decf	sprintf@prec,f,c
  1265  00042C  2841               	incf	sprintf@prec,w,c
  1266  00042E  A4D8               	btfss	status,2,c
  1267  000430  D7D3               	goto	i2l1114
  1268  000432                     i2l1122:
  1269  000432  C039  FFF6         	movff	sprintf@f,tblptrl
  1270  000436  C03A  FFF7         	movff	sprintf@f+1,tblptrh
  1271  00043A  4A39               	infsnz	sprintf@f,f,c
  1272  00043C  2A3A               	incf	sprintf@f+1,f,c
  1273  00043E                     	if	0	;tblptru may be non-zero
  1274  00043E                     	endif
  1275  00043E                     	if	0	;tblptru may be non-zero
  1276  00043E                     	endif
  1277  00043E  0008               	tblrd		*
  1278  000440  CFF5 F044          	movff	tablat,sprintf@c
  1279  000444  5044               	movf	sprintf@c,w,c
  1280  000446  A4D8               	btfss	status,2,c
  1281  000448  D768               	goto	i2l1070
  1282  00044A                     i2l1124:
  1283                           
  1284                           ;doprnt.c: 1538: *sp = 0;
  1285  00044A  C037  FFD9         	movff	sprintf@sp,fsr2l
  1286  00044E  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1287  000452  0E00               	movlw	0
  1288  000454  6EDF               	movwf	indf2,c
  1289  000456  0012               	return	
  1290  000458                     __end_of_sprintf:
  1291                           	opt stack 0
  1292                           pclatu	equ	0xFFB
  1293                           pclath	equ	0xFFA
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           prodh	equ	0xFF4
  1299                           prodl	equ	0xFF3
  1300                           intcon	equ	0xFF2
  1301                           postinc0	equ	0xFEE
  1302                           fsr0h	equ	0xFEA
  1303                           fsr0l	equ	0xFE9
  1304                           wreg	equ	0xFE8
  1305                           fsr1h	equ	0xFE2
  1306                           fsr1l	equ	0xFE1
  1307                           indf2	equ	0xFDF
  1308                           postinc2	equ	0xFDE
  1309                           postdec2	equ	0xFDD
  1310                           fsr2h	equ	0xFDA
  1311                           fsr2l	equ	0xFD9
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function ___lwmod *****************
  1315 ;; Defined at:
  1316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  dividend        2    7[COMRAM] unsigned int 
  1319 ;;  divisor         2    9[COMRAM] unsigned int 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;  counter         1   11[COMRAM] unsigned char 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  2    7[COMRAM] unsigned int 
  1324 ;; Registers used:
  1325 ;;		wreg, status,2, status,0
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1331 ;;      Params:         4       0       0       0
  1332 ;;      Locals:         1       0       0       0
  1333 ;;      Temps:          0       0       0       0
  1334 ;;      Totals:         5       0       0       0
  1335 ;;Total ram usage:        5 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_sprintf
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text8
  1345  0006B8                     __ptext8:
  1346                           	opt stack 0
  1347  0006B8                     ___lwmod:
  1348                           	opt stack 24
  1349                           
  1350                           ;incstack = 0
  1351  0006B8  5034               	movf	___lwmod@divisor,w,c
  1352  0006BA  1035               	iorwf	___lwmod@divisor+1,w,c
  1353  0006BC  B4D8               	btfsc	status,2,c
  1354  0006BE  D018               	goto	i2l507
  1355  0006C0  0E01               	movlw	1
  1356  0006C2  6E36               	movwf	___lwmod@counter,c
  1357  0006C4  D004               	goto	i2l980
  1358  0006C6                     i2l978:
  1359  0006C6  90D8               	bcf	status,0,c
  1360  0006C8  3634               	rlcf	___lwmod@divisor,f,c
  1361  0006CA  3635               	rlcf	___lwmod@divisor+1,f,c
  1362  0006CC  2A36               	incf	___lwmod@counter,f,c
  1363  0006CE                     i2l980:
  1364  0006CE  AE35               	btfss	___lwmod@divisor+1,7,c
  1365  0006D0  D7FA               	goto	i2l978
  1366  0006D2                     i2l982:
  1367  0006D2  5034               	movf	___lwmod@divisor,w,c
  1368  0006D4  5C32               	subwf	___lwmod@dividend,w,c
  1369  0006D6  5035               	movf	___lwmod@divisor+1,w,c
  1370  0006D8  5833               	subwfb	___lwmod@dividend+1,w,c
  1371  0006DA  A0D8               	btfss	status,0,c
  1372  0006DC  D004               	goto	i2l986
  1373  0006DE  5034               	movf	___lwmod@divisor,w,c
  1374  0006E0  5E32               	subwf	___lwmod@dividend,f,c
  1375  0006E2  5035               	movf	___lwmod@divisor+1,w,c
  1376  0006E4  5A33               	subwfb	___lwmod@dividend+1,f,c
  1377  0006E6                     i2l986:
  1378  0006E6  90D8               	bcf	status,0,c
  1379  0006E8  3235               	rrcf	___lwmod@divisor+1,f,c
  1380  0006EA  3234               	rrcf	___lwmod@divisor,f,c
  1381  0006EC  2E36               	decfsz	___lwmod@counter,f,c
  1382  0006EE  D7F1               	goto	i2l982
  1383  0006F0                     i2l507:
  1384  0006F0  C032  F032         	movff	___lwmod@dividend,?___lwmod
  1385  0006F4  C033  F033         	movff	___lwmod@dividend+1,?___lwmod+1
  1386  0006F8  0012               	return		;funcret
  1387  0006FA                     __end_of___lwmod:
  1388                           	opt stack 0
  1389                           pclatu	equ	0xFFB
  1390                           pclath	equ	0xFFA
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           intcon	equ	0xFF2
  1398                           postinc0	equ	0xFEE
  1399                           fsr0h	equ	0xFEA
  1400                           fsr0l	equ	0xFE9
  1401                           wreg	equ	0xFE8
  1402                           fsr1h	equ	0xFE2
  1403                           fsr1l	equ	0xFE1
  1404                           indf2	equ	0xFDF
  1405                           postinc2	equ	0xFDE
  1406                           postdec2	equ	0xFDD
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function ___lwdiv *****************
  1412 ;; Defined at:
  1413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  dividend        2    0[COMRAM] unsigned int 
  1416 ;;  divisor         2    2[COMRAM] unsigned int 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  quotient        2    4[COMRAM] unsigned int 
  1419 ;;  counter         1    6[COMRAM] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2    0[COMRAM] unsigned int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1429 ;;      Params:         4       0       0       0
  1430 ;;      Locals:         3       0       0       0
  1431 ;;      Temps:          0       0       0       0
  1432 ;;      Totals:         7       0       0       0
  1433 ;;Total ram usage:        7 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_sprintf
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text9
  1443  00061E                     __ptext9:
  1444                           	opt stack 0
  1445  00061E                     ___lwdiv:
  1446                           	opt stack 24
  1447                           
  1448                           ;incstack = 0
  1449  00061E  0E00               	movlw	0
  1450  000620  6E30               	movwf	___lwdiv@quotient+1,c
  1451  000622  0E00               	movlw	0
  1452  000624  6E2F               	movwf	___lwdiv@quotient,c
  1453  000626  502D               	movf	___lwdiv@divisor,w,c
  1454  000628  102E               	iorwf	___lwdiv@divisor+1,w,c
  1455  00062A  B4D8               	btfsc	status,2,c
  1456  00062C  D01C               	goto	i2l497
  1457  00062E  0E01               	movlw	1
  1458  000630  6E31               	movwf	___lwdiv@counter,c
  1459  000632  D004               	goto	i2l960
  1460  000634                     i2l958:
  1461  000634  90D8               	bcf	status,0,c
  1462  000636  362D               	rlcf	___lwdiv@divisor,f,c
  1463  000638  362E               	rlcf	___lwdiv@divisor+1,f,c
  1464  00063A  2A31               	incf	___lwdiv@counter,f,c
  1465  00063C                     i2l960:
  1466  00063C  AE2E               	btfss	___lwdiv@divisor+1,7,c
  1467  00063E  D7FA               	goto	i2l958
  1468  000640                     i2l962:
  1469  000640  90D8               	bcf	status,0,c
  1470  000642  362F               	rlcf	___lwdiv@quotient,f,c
  1471  000644  3630               	rlcf	___lwdiv@quotient+1,f,c
  1472  000646  502D               	movf	___lwdiv@divisor,w,c
  1473  000648  5C2B               	subwf	___lwdiv@dividend,w,c
  1474  00064A  502E               	movf	___lwdiv@divisor+1,w,c
  1475  00064C  582C               	subwfb	___lwdiv@dividend+1,w,c
  1476  00064E  A0D8               	btfss	status,0,c
  1477  000650  D005               	goto	i2l970
  1478  000652  502D               	movf	___lwdiv@divisor,w,c
  1479  000654  5E2B               	subwf	___lwdiv@dividend,f,c
  1480  000656  502E               	movf	___lwdiv@divisor+1,w,c
  1481  000658  5A2C               	subwfb	___lwdiv@dividend+1,f,c
  1482  00065A  802F               	bsf	___lwdiv@quotient,0,c
  1483  00065C                     i2l970:
  1484  00065C  90D8               	bcf	status,0,c
  1485  00065E  322E               	rrcf	___lwdiv@divisor+1,f,c
  1486  000660  322D               	rrcf	___lwdiv@divisor,f,c
  1487  000662  2E31               	decfsz	___lwdiv@counter,f,c
  1488  000664  D7ED               	goto	i2l962
  1489  000666                     i2l497:
  1490  000666  C02F  F02B         	movff	___lwdiv@quotient,?___lwdiv
  1491  00066A  C030  F02C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1492  00066E  0012               	return		;funcret
  1493  000670                     __end_of___lwdiv:
  1494                           	opt stack 0
  1495                           pclatu	equ	0xFFB
  1496                           pclath	equ	0xFFA
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodh	equ	0xFF4
  1502                           prodl	equ	0xFF3
  1503                           intcon	equ	0xFF2
  1504                           postinc0	equ	0xFEE
  1505                           fsr0h	equ	0xFEA
  1506                           fsr0l	equ	0xFE9
  1507                           wreg	equ	0xFE8
  1508                           fsr1h	equ	0xFE2
  1509                           fsr1l	equ	0xFE1
  1510                           indf2	equ	0xFDF
  1511                           postinc2	equ	0xFDE
  1512                           postdec2	equ	0xFDD
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _LCD_String *****************
  1518 ;; Defined at:
  1519 ;;		line 106 in file "lcd.h"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  string          2    4[COMRAM] PTR unsigned char 
  1522 ;;		 -> buf(40), 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;		None               void
  1527 ;; Registers used:
  1528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1534 ;;      Params:         2       0       0       0
  1535 ;;      Locals:         0       0       0       0
  1536 ;;      Temps:          1       0       0       0
  1537 ;;      Totals:         3       0       0       0
  1538 ;;Total ram usage:        3 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    3
  1541 ;; This function calls:
  1542 ;;		i2_SendLCD
  1543 ;; This function is called by:
  1544 ;;		_InterruptHandlerHigh
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text10
  1549  0006FA                     __ptext10:
  1550                           	opt stack 0
  1551  0006FA                     _LCD_String:
  1552                           	opt stack 22
  1553                           
  1554                           ;lcd.h: 107: while(*string != 0){
  1555                           
  1556                           ;incstack = 0
  1557  0006FA  D012               	goto	i2l1066
  1558  0006FC                     i2l1060:
  1559                           
  1560                           ;lcd.h: 108: SendLCD(*string++,1);
  1561  0006FC  0E01               	movlw	1
  1562  0006FE  6E2D               	movwf	i2SendLCD@type,c
  1563  000700  C02F  FFD9         	movff	LCD_String@string,fsr2l
  1564  000704  C030  FFDA         	movff	LCD_String@string+1,fsr2h
  1565  000708  50DF               	movf	indf2,w,c
  1566  00070A  ECAF  F003         	call	i2_SendLCD
  1567  00070E  4A2F               	infsnz	LCD_String@string,f,c
  1568  000710  2A30               	incf	LCD_String@string+1,f,c
  1569                           
  1570                           ;lcd.h: 109: _delay((unsigned long)((50)*(8000000/4000.0)));
  1571  000712  0E82               	movlw	130
  1572  000714  6E31               	movwf	??_LCD_String& (0+255),c
  1573  000716  0EDE               	movlw	222
  1574  000718                     i2u59_47:
  1575  000718  2EE8               	decfsz	wreg,f,c
  1576  00071A  D7FE               	goto	i2u59_47
  1577  00071C  2E31               	decfsz	??_LCD_String& (0+255),f,c
  1578  00071E  D7FC               	goto	i2u59_47
  1579  000720                     i2l1066:
  1580  000720  C02F  FFD9         	movff	LCD_String@string,fsr2l
  1581  000724  C030  FFDA         	movff	LCD_String@string+1,fsr2h
  1582  000728  50DF               	movf	indf2,w,c
  1583  00072A  B4D8               	btfsc	status,2,c
  1584  00072C  0012               	return	
  1585  00072E  D7E6               	goto	i2l1060
  1586  000730                     __end_of_LCD_String:
  1587                           	opt stack 0
  1588                           pclatu	equ	0xFFB
  1589                           pclath	equ	0xFFA
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           prodh	equ	0xFF4
  1595                           prodl	equ	0xFF3
  1596                           intcon	equ	0xFF2
  1597                           postinc0	equ	0xFEE
  1598                           fsr0h	equ	0xFEA
  1599                           fsr0l	equ	0xFE9
  1600                           wreg	equ	0xFE8
  1601                           fsr1h	equ	0xFE2
  1602                           fsr1l	equ	0xFE1
  1603                           indf2	equ	0xFDF
  1604                           postinc2	equ	0xFDE
  1605                           postdec2	equ	0xFDD
  1606                           fsr2h	equ	0xFDA
  1607                           fsr2l	equ	0xFD9
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function i2_SendLCD *****************
  1611 ;; Defined at:
  1612 ;;		line 45 in file "lcd.h"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  Byte            1    wreg     unsigned char 
  1615 ;;  type            1    2[COMRAM] unsigned char 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  Byte            1    3[COMRAM] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1627 ;;      Params:         1       0       0       0
  1628 ;;      Locals:         1       0       0       0
  1629 ;;      Temps:          0       0       0       0
  1630 ;;      Totals:         2       0       0       0
  1631 ;;Total ram usage:        2 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    2
  1634 ;; This function calls:
  1635 ;;		i2_LCDout
  1636 ;; This function is called by:
  1637 ;;		_LCD_String
  1638 ;;		_InterruptHandlerHigh
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text11
  1643  00075E                     __ptext11:
  1644                           	opt stack 0
  1645  00075E                     i2_SendLCD:
  1646                           	opt stack 23
  1647                           
  1648                           ;incstack = 0
  1649                           ;i2SendLCD@Byte stored from wreg
  1650  00075E  6E2E               	movwf	i2SendLCD@Byte,c
  1651                           
  1652                           ;lcd.h: 48: LATAbits.LATA6 = type;
  1653  000760  B02D               	btfsc	i2SendLCD@type,0,c
  1654  000762  D002               	bra	i2u29_45
  1655  000764  9C89               	bcf	3977,6,c	;volatile
  1656  000766  D001               	bra	i2u29_46
  1657  000768                     i2u29_45:
  1658  000768  8C89               	bsf	3977,6,c	;volatile
  1659  00076A                     i2u29_46:
  1660                           
  1661                           ;lcd.h: 50: LCDout(Byte >> 4);
  1662  00076A  382E               	swapf	i2SendLCD@Byte,w,c
  1663  00076C  0B0F               	andlw	15
  1664  00076E  ECD3  F002         	call	i2_LCDout
  1665                           
  1666                           ;lcd.h: 51: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1667  000772  0E06               	movlw	6
  1668  000774                     i2u60_47:
  1669  000774  2EE8               	decfsz	wreg,f,c
  1670  000776  D7FE               	goto	i2u60_47
  1671  000778  D000               	nop2		;nop
  1672                           
  1673                           ;lcd.h: 53: LCDout(Byte & 0b00001111);
  1674  00077A  502E               	movf	i2SendLCD@Byte,w,c
  1675  00077C  0B0F               	andlw	15
  1676  00077E  ECD3  F002         	call	i2_LCDout
  1677  000782  0012               	return		;funcret
  1678  000784                     __end_ofi2_SendLCD:
  1679                           	opt stack 0
  1680                           pclatu	equ	0xFFB
  1681                           pclath	equ	0xFFA
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           prodh	equ	0xFF4
  1687                           prodl	equ	0xFF3
  1688                           intcon	equ	0xFF2
  1689                           postinc0	equ	0xFEE
  1690                           fsr0h	equ	0xFEA
  1691                           fsr0l	equ	0xFE9
  1692                           wreg	equ	0xFE8
  1693                           fsr1h	equ	0xFE2
  1694                           fsr1l	equ	0xFE1
  1695                           indf2	equ	0xFDF
  1696                           postinc2	equ	0xFDE
  1697                           postdec2	equ	0xFDD
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function i2_LCDout *****************
  1703 ;; Defined at:
  1704 ;;		line 33 in file "lcd.h"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  number          1    wreg     unsigned char 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  number          1    1[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1718 ;;      Params:         0       0       0       0
  1719 ;;      Locals:         1       0       0       0
  1720 ;;      Temps:          1       0       0       0
  1721 ;;      Totals:         2       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    1
  1725 ;; This function calls:
  1726 ;;		i2_E_TOG
  1727 ;; This function is called by:
  1728 ;;		i2_SendLCD
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text12
  1733  0005A6                     __ptext12:
  1734                           	opt stack 0
  1735  0005A6                     i2_LCDout:
  1736                           	opt stack 23
  1737                           
  1738                           ;incstack = 0
  1739                           ;i2LCDout@number stored from wreg
  1740  0005A6  6E2C               	movwf	i2LCDout@number,c
  1741                           
  1742                           ;lcd.h: 35: LATDbits.LD1 = number >> 3 & 0b00000001;
  1743  0005A8  C02C  F02B         	movff	i2LCDout@number,??i2_LCDout
  1744  0005AC  90D8               	bcf	status,0,c
  1745  0005AE  322B               	rrcf	??i2_LCDout,f,c
  1746  0005B0  90D8               	bcf	status,0,c
  1747  0005B2  322B               	rrcf	??i2_LCDout,f,c
  1748  0005B4  90D8               	bcf	status,0,c
  1749  0005B6  322B               	rrcf	??i2_LCDout,f,c
  1750  0005B8  0E01               	movlw	1
  1751  0005BA  162B               	andwf	??i2_LCDout,f,c
  1752  0005BC  462B               	rlncf	??i2_LCDout,f,c
  1753  0005BE  508C               	movf	3980,w,c	;volatile
  1754  0005C0  182B               	xorwf	??i2_LCDout,w,c
  1755  0005C2  0BFD               	andlw	-3
  1756  0005C4  182B               	xorwf	??i2_LCDout,w,c
  1757  0005C6  6E8C               	movwf	3980,c	;volatile
  1758                           
  1759                           ;lcd.h: 36: LATDbits.LD0 = (number >> 2) & 0b00000001;
  1760  0005C8  C02C  F02B         	movff	i2LCDout@number,??i2_LCDout
  1761  0005CC  90D8               	bcf	status,0,c
  1762  0005CE  322B               	rrcf	??i2_LCDout,f,c
  1763  0005D0  90D8               	bcf	status,0,c
  1764  0005D2  322B               	rrcf	??i2_LCDout,f,c
  1765  0005D4  0E01               	movlw	1
  1766  0005D6  162B               	andwf	??i2_LCDout,f,c
  1767  0005D8  508C               	movf	3980,w,c	;volatile
  1768  0005DA  182B               	xorwf	??i2_LCDout,w,c
  1769  0005DC  0BFE               	andlw	-2
  1770  0005DE  182B               	xorwf	??i2_LCDout,w,c
  1771  0005E0  6E8C               	movwf	3980,c	;volatile
  1772                           
  1773                           ;lcd.h: 37: LATCbits.LC2 = (number >> 1) & 0b00000001;
  1774  0005E2  C02C  F02B         	movff	i2LCDout@number,??i2_LCDout
  1775  0005E6  90D8               	bcf	status,0,c
  1776  0005E8  322B               	rrcf	??i2_LCDout,f,c
  1777  0005EA  0E01               	movlw	1
  1778  0005EC  162B               	andwf	??i2_LCDout,f,c
  1779  0005EE  462B               	rlncf	??i2_LCDout,f,c
  1780  0005F0  462B               	rlncf	??i2_LCDout,f,c
  1781  0005F2  508B               	movf	3979,w,c	;volatile
  1782  0005F4  182B               	xorwf	??i2_LCDout,w,c
  1783  0005F6  0BFB               	andlw	-5
  1784  0005F8  182B               	xorwf	??i2_LCDout,w,c
  1785  0005FA  6E8B               	movwf	3979,c	;volatile
  1786                           
  1787                           ;lcd.h: 38: LATCbits.LC1 = number & 0b00000001;
  1788  0005FC  C02C  F02B         	movff	i2LCDout@number,??i2_LCDout
  1789  000600  0E01               	movlw	1
  1790  000602  162B               	andwf	??i2_LCDout,f,c
  1791  000604  462B               	rlncf	??i2_LCDout,f,c
  1792  000606  508B               	movf	3979,w,c	;volatile
  1793  000608  182B               	xorwf	??i2_LCDout,w,c
  1794  00060A  0BFD               	andlw	-3
  1795  00060C  182B               	xorwf	??i2_LCDout,w,c
  1796  00060E  6E8B               	movwf	3979,c	;volatile
  1797                           
  1798                           ;lcd.h: 40: E_TOG();
  1799  000610  ECE3  F003         	call	i2_E_TOG	;wreg free
  1800                           
  1801                           ;lcd.h: 41: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1802  000614  0E03               	movlw	3
  1803  000616                     i2u61_47:
  1804  000616  2EE8               	decfsz	wreg,f,c
  1805  000618  D7FE               	goto	i2u61_47
  1806  00061A  F000               	nop	
  1807  00061C  0012               	return		;funcret
  1808  00061E                     __end_ofi2_LCDout:
  1809                           	opt stack 0
  1810                           pclatu	equ	0xFFB
  1811                           pclath	equ	0xFFA
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           fsr0h	equ	0xFEA
  1821                           fsr0l	equ	0xFE9
  1822                           wreg	equ	0xFE8
  1823                           fsr1h	equ	0xFE2
  1824                           fsr1l	equ	0xFE1
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function i2_E_TOG *****************
  1833 ;; Defined at:
  1834 ;;		line 26 in file "lcd.h"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;		None               void
  1841 ;; Registers used:
  1842 ;;		wreg
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1848 ;;      Params:         0       0       0       0
  1849 ;;      Locals:         0       0       0       0
  1850 ;;      Temps:          0       0       0       0
  1851 ;;      Totals:         0       0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		i2_LCDout
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text13
  1862  0007C6                     __ptext13:
  1863                           	opt stack 0
  1864  0007C6                     i2_E_TOG:
  1865                           	opt stack 23
  1866                           
  1867                           ;lcd.h: 27: LATCbits.LC0 = 1;
  1868                           
  1869                           ;incstack = 0
  1870  0007C6  808B               	bsf	3979,0,c	;volatile
  1871                           
  1872                           ;lcd.h: 28: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1873  0007C8  0E03               	movlw	3
  1874  0007CA                     i2u62_47:
  1875  0007CA  2EE8               	decfsz	wreg,f,c
  1876  0007CC  D7FE               	goto	i2u62_47
  1877  0007CE  F000               	nop	
  1878                           
  1879                           ;lcd.h: 29: LATCbits.LC0 = 0;
  1880  0007D0  908B               	bcf	3979,0,c	;volatile
  1881  0007D2  0012               	return		;funcret
  1882  0007D4                     __end_ofi2_E_TOG:
  1883                           	opt stack 0
  1884                           pclatu	equ	0xFFB
  1885                           pclath	equ	0xFFA
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           intcon	equ	0xFF2
  1893                           postinc0	equ	0xFEE
  1894                           fsr0h	equ	0xFEA
  1895                           fsr0l	equ	0xFE9
  1896                           wreg	equ	0xFE8
  1897                           fsr1h	equ	0xFE2
  1898                           fsr1l	equ	0xFE1
  1899                           indf2	equ	0xFDF
  1900                           postinc2	equ	0xFDE
  1901                           postdec2	equ	0xFDD
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           pclatu	equ	0xFFB
  1906                           pclath	equ	0xFFA
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           prodh	equ	0xFF4
  1912                           prodl	equ	0xFF3
  1913                           intcon	equ	0xFF2
  1914                           postinc0	equ	0xFEE
  1915                           fsr0h	equ	0xFEA
  1916                           fsr0l	equ	0xFE9
  1917                           wreg	equ	0xFE8
  1918                           fsr1h	equ	0xFE2
  1919                           fsr1l	equ	0xFE1
  1920                           indf2	equ	0xFDF
  1921                           postinc2	equ	0xFDE
  1922                           postdec2	equ	0xFDD
  1923                           fsr2h	equ	0xFDA
  1924                           fsr2l	equ	0xFD9
  1925                           status	equ	0xFD8
  1926                           
  1927                           	psect	rparam
  1928  0000                     pclatu	equ	0xFFB
  1929                           pclath	equ	0xFFA
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           intcon	equ	0xFF2
  1937                           postinc0	equ	0xFEE
  1938                           fsr0h	equ	0xFEA
  1939                           fsr0l	equ	0xFE9
  1940                           wreg	equ	0xFE8
  1941                           fsr1h	equ	0xFE2
  1942                           fsr1l	equ	0xFE1
  1943                           indf2	equ	0xFDF
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950                           	psect	temp
  1951  000053                     btemp:
  1952                           	opt stack 0
  1953  000053                     	ds	1
  1954  0000                     int$flags	set	btemp
  1955                           pclatu	equ	0xFFB
  1956                           pclath	equ	0xFFA
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           fsr0h	equ	0xFEA
  1966                           fsr0l	equ	0xFE9
  1967                           wreg	equ	0xFE8
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           indf2	equ	0xFDF
  1971                           postinc2	equ	0xFDE
  1972                           postdec2	equ	0xFDD
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      82
    BANK0           160      5       5
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> buf(COMRAM[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> buf(COMRAM[40]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_String->i2_SendLCD
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_LCD_Init
    _main->_SetLine
    _SetLine->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1758
                           _LCD_Init
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     866
                                              4 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     892
                                              4 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     804
                                              2 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0      88
                                              0 BANK0      2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                14    14      0    1703
                                             26 COMRAM    14    14      0
                         _LCD_String
                            _sprintf
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             23    17      6    1182
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _LCD_String                                           3     1      2     315
                                              4 COMRAM     3     1      2
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (6) i2_SendLCD                                            2     1      1     206
                                              2 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (7) i2_LCDout                                             2     2      0      88
                                              0 COMRAM     2     2      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (8) i2_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG

 _InterruptHandlerHigh (ROOT)
   _LCD_String
     i2_SendLCD
       i2_LCDout
         i2_E_TOG
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   i2_SendLCD
     i2_LCDout
       i2_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      5       5       4        3.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      52       1       87.2%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57       5        0.0%
DATA                 0      0      57      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Oct 31 16:02:20 2017

                           l60 07B6                             l56 07A2                    ?_LCD_String 002F  
                          u435 073E                            u507 049A                            u436 0740  
                          u517 04A8                            u527 04BC                            u537 04D6  
                          u547 04EE                            u557 0502                            u477 06B0  
                          u567 074C                            u487 047C                            u577 059E  
                          u497 048C                            u587 07BC                            _buf 0003  
                          wreg 000FE8                           l1220 06A2                           l1222 06AE  
                         l1216 068A                           STR_1 030B                           i2l66 007E  
              __end_ofi2_E_TOG 07D4                           _main 079E                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0053                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00BA                   ___param_bank 000010  
              __end_of_SendLCD 075E                __end_of_SetLine 06B8               __end_of_LCD_Init 050A  
                        ?_main 002B                __end_of___lwdiv 0670                __end_of___lwmod 06FA  
                        i2l507 06F0                          i2l497 0666                          i2l960 063C  
                        i2l970 065C                          i2l962 0640                          i2l980 06CE  
                        i2l958 0634                          i2l982 06D2                          i2l986 06E6  
                        i2l978 06C6                          _E_TOG 07B8               __end_ofi2_LCDout 061E  
                        _TRISC 000F94                          _TRISD 000F95                __end_of_dpowers 030B  
           __size_ofi2_SendLCD 0026                          tablat 000FF5                          status 000FD8  
          __size_of_LCD_String 0036                __end_of_sprintf 0458                __initialization 0784  
                 __end_of_main 07B8                 __CFG_OSC$IRCIO 000000               LCD_String@string 002F  
                       ??_main 0065                  __activetblptr 000002                         ?_E_TOG 002B  
                    ??i2_E_TOG 002B                         i2l1120 042A                         i2l1112 03D2  
                       i2l1114 03D8                         i2l1106 03B6                         i2l1122 0432  
                       i2l1060 06FC                         i2l1124 044A                         i2l1070 031A  
                       i2l1066 0720                         i2l1082 035E                         i2l1092 0386  
                       i2l1076 0334                         i2l1094 038A                         _LCDout 050A  
                  SendLCD@Byte 0063                         _OSCCON 000FD3                    SendLCD@type 0062  
                    ??_SendLCD 0063                      ??_SetLine 0064                      ??___lwdiv 002F  
                    ??___lwmod 0036                         clear_0 078A              __end_ofi2_SendLCD 0784  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_sprintf 003D                     __accesstop 0060  
      __end_of__initialization 0790                      ?_LCD_Init 002B                  ___rparam_used 000001  
                  SetLine@line 0064                  __end_of_E_TOG 07C6                      ?i2_LCDout 002B  
               __pcstackCOMRAM 002B                   ??_LCD_String 0031                        ??_E_TOG 0060  
__size_of_InterruptHandlerHigh 00B2                        ?_LCDout 002B                     ??_LCD_Init 0064  
           __end_of_LCD_String 0730                     ??i2_LCDout 002B                        i2_E_TOG 07C6  
                      i2u60_47 0774                        i2u29_45 0768                        i2u29_46 076A  
                      i2u61_47 0616                        i2u62_47 07CA                        i2u59_47 0718  
              __size_of_LCDout 009C                        _SendLCD 0730                        __Hparam 0000  
                      _SetLine 0670                        __Lparam 0000                        ___lwdiv 061E  
                      ___lwmod 06B8                   __psmallconst 0300                        __pcinit 0784  
                      __ramtop 0300                        __ptext0 079E                        __ptext1 0670  
                      __ptext2 0458                        __ptext3 0730                        __ptext4 050A  
                      __ptext5 07B8                        __ptext7 0310                        __ptext8 06B8  
                      __ptext9 061E                        _dpowers 0301                   LCDout@number 0061  
                      _sprintf 0310           end_of_initialization 0790                  __Lmediumconst 0000  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                    i2_SendLCD 075E                      _TRISAbits 000F92                      _TRISCbits 000F94  
               __end_of_LCDout 05A6              __size_of_LCD_Init 00B2              __size_ofi2_LCDout 0078  
                   ?i2_SendLCD 002D            start_initialization 0784                       ??_LCDout 0060  
 __end_of_InterruptHandlerHigh 00BA                    __pbssCOMRAM 0001                  __pcstackBANK0 0060  
                     ?i2_E_TOG 002B                 i2LCDout@number 002C                    sprintf@flag 0040  
                  sprintf@prec 0041                       ?_SendLCD 0062                       ?_SetLine 002B  
             ___lwdiv@dividend 002B                      __pintcode 0008                       ?___lwdiv 002B  
                     ?___lwmod 0032                    __smallconst 0300                 __size_of_E_TOG 000E  
                  ??i2_SendLCD 002E               ___lwdiv@quotient 002F                       ?_sprintf 0037  
                     _LCD_Init 0458                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       i2_LCDout 05A6           _InterruptHandlerHigh 0008  
             __size_ofi2_E_TOG 000E                  i2SendLCD@Byte 002E                  i2SendLCD@type 002D  
                     __Hrparam 0000               __size_of_SendLCD 002E                       __Lrparam 0000  
             __size_of_SetLine 0048               __size_of___lwdiv 0052               __size_of___lwmod 0042  
        ?_InterruptHandlerHigh 002B                     sprintf@val 0042                ___lwdiv@divisor 002D  
              ___lwdiv@counter 0031                       __ptext10 06FA                       __ptext11 075E  
                     __ptext12 05A6                       __ptext13 07C6                       _btnCount 0001  
             __size_of_sprintf 0148                  __size_of_main 001A                       int$flags 0053  
                   _LCD_String 06FA                     _INTCONbits 000FF2                       intlevel2 0000  
                    sprintf@ap 003E                      sprintf@sp 0037               ___lwmod@dividend 0032  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0045                       sprintf@c 0044  
                     sprintf@f 0039                ___lwmod@divisor 0034                ___lwmod@counter 0036  
